# Copyright (c) 2020-2022 Centre national de la recherche scientifique (CNRS)
# Copyright (c) 2020-2022 Commissariat a l'énergie atomique et aux énergies alternatives (CEA)
# Copyright (c) 2020-2022 Institut national de recherche en informatique et en automatique (Inria)
# Copyright (c) 2020-2022 Université Paris-Saclay
# Copyright (c) 2020-2022 Université de Versailles Saint-Quentin-en-Yvelines
#
# SPDX-License-Identifier: MIT

pdi:
  metadata:
    pcoord_1d: int
    pcoord: { type: array, subtype: int, size: 2 }
    psize: { type: array, subtype: int, size: 2 }
    dsize: { type: array, subtype: int, size: 2 }
    MaxtimeSteps: int
    timestep: int
  data:
    local_t:
      type: array
      subtype: double
      size: ['$dsize[0]', '$dsize[1]']
      subsize: ['$dsize[0] - 2', '$dsize[1] - 2']
      start: [1, 1]
  plugins:
#    trace:
    mpi:
    deisa:
      scheduler_info: scheduler.json
      init_on: init                                                                               # Event called after sharing all metdata
      time_step: $timestep                                                                        # Timestep variable
      deisa_arrays:                                                                               # Those are Deisa virtual arrays equivalent to Dask arrays
        global_t:                                                                                 # That's the name that i will send to Dask for this array
          type: array
          subtype: double
          size: [$MaxtimeSteps, '($dsize[0] - 2) * $psize[0]', '($dsize[1] - 2) * $psize[1]']
          subsize: [1, '$dsize[0] - 2', '$dsize[1] - 2']                                          # That's how it's chunked, the size of each chunk
          start: [$timestep, '($dsize[0] - 2) * $pcoord[0]', '($dsize[1] - 2) * $pcoord[1]']      # That's where each chunk will start
          +timedim: 0                                                                             # A tag for the time dim, only this configuration is supported for the moment
      map_in:                                                                                     # Which local data will be mapped to which deisa array
        local_t: global_t
